<?xml version='1.0' encoding='UTF-8'?>
<omdoc xml:id="A236510.omdoc" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:omdoc="http://omdoc.org/ns" xmlns="http://omdoc.org/ns">
        <!--This OMDoc file is generated from an OEIS entry, do not edit-->
        <theory name="A236510">
          <assertion class="***** TTTT *****">
      <CMP></CMP>
    </assertion><omtext class="starts-with">
      <CMP> 1,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,19,21,22,23,25,26,27,29,30,31,</CMP>
    </omtext><assertion class="***** UUUU *****">
      <CMP> 32,33,34,35,36,37,38,39,41,43,46,47,49,51,53,55,57,58,59,61,62,64,65,</CMP>
    </assertion><assertion class="***** IIII *****">
      <CMP> 67,69,71,73,74,77,79,81,82,83,85,86,87,89,90,91,93,94,95</CMP>
    </assertion><omtext class="name">
      <CMP> Numbers whose prime factorization viewed as a tuple of powers is palindromic, when viewed from the least to the largest prime present, including also any zero-exponents for the intermediate primes.</CMP>
    </omtext><omtext class="comment">
      <CMP> Compute the prime factorization of n = product(p_i^r_i). If the tuple (r_1,...) is a palindrome (excluding leading or trailing zeros, but including any possible intermediate zeros), n belongs to the sequence.</CMP>
    </omtext><omtext class="comment">
      <CMP> 42 is the first element of A242414 not in this sequence, as 42 = 2^1 * 3^1 * 5^0 * 7^1, and (1,1,0,1) is not a palindrome, although (1,1,1) is.</CMP>
    </omtext><assertion class="example">
      <CMP> 14 is a member as 14 = 2^1 * 3^0 * 5^0 * 7^1, and (1,0,0,1) is a palindrome.</CMP>
    </assertion><assertion class="example">
      <CMP> 42 is not a member as 42 = 2^1 * 3^1 * 5^0 * 7^1, and (1,1,0,1) is not a palindrome.</CMP>
    </assertion><omtext class="program">
      <CMP> (Python)</CMP>
    </omtext><omtext class="program">
      <CMP> import re</CMP>
    </omtext><omtext class="program">
      <CMP> ...</CMP>
    </omtext><omtext class="program">
      <CMP> def factorize(n):</CMP>
    </omtext><omtext class="program">
      <CMP> ...for prime in primes:</CMP>
    </omtext><omtext class="program">
      <CMP> ......power = 0</CMP>
    </omtext><omtext class="program">
      <CMP> ......while n%prime==0:</CMP>
    </omtext><omtext class="program">
      <CMP> .........n /= prime</CMP>
    </omtext><omtext class="program">
      <CMP> .........power += 1</CMP>
    </omtext><omtext class="program">
      <CMP> ......yield power</CMP>
    </omtext><omtext class="program">
      <CMP> ...</CMP>
    </omtext><omtext class="program">
      <CMP> re_zeroes = re.compile('(?P&lt;zeroes&gt;0*)(?P&lt;middle&gt;.*[^0])(?P=zeroes)')</CMP>
    </omtext><omtext class="program">
      <CMP> ...</CMP>
    </omtext><omtext class="program">
      <CMP> is_palindrome = lambda s: s==s[::-1]</CMP>
    </omtext><omtext class="program">
      <CMP> ...</CMP>
    </omtext><omtext class="program">
      <CMP> def has_palindromic_factorization(n):</CMP>
    </omtext><omtext class="program">
      <CMP> ...if n==1:</CMP>
    </omtext><omtext class="program">
      <CMP> ......return True</CMP>
    </omtext><omtext class="program">
      <CMP> ...s = ''.join(str(x) for x in factorize(n))</CMP>
    </omtext><omtext class="program">
      <CMP> ...try:</CMP>
    </omtext><omtext class="program">
      <CMP> ......middle = re_zeroes.match(s).group('middle')</CMP>
    </omtext><omtext class="program">
      <CMP> ......if is_palindrome(middle):</CMP>
    </omtext><omtext class="program">
      <CMP> .........return True</CMP>
    </omtext><omtext class="program">
      <CMP> ...except AttributeError:</CMP>
    </omtext><omtext class="program">
      <CMP> ......return False</CMP>
    </omtext><omtext class="program">
      <CMP> ...</CMP>
    </omtext><omtext class="program">
      <CMP> a = has_palindromic_factorization</CMP>
    </omtext><assertion class="crossref">
      <CMP> A subsequence of A242414.</CMP>
    </assertion><assertion class="crossref">
      <CMP> Cf. also A242418, A085924.</CMP>
    </assertion><assertion class="keywords">
      <CMP> nonn,easy</CMP>
    </assertion><assertion class="offset">
      <CMP> 1,2</CMP>
    </assertion><assertion class="author">
      <CMP> _Christian Perfect_, Jan 27 2014</CMP>
    </assertion>
        </theory>
      </omdoc>