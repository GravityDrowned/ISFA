<?xml version='1.0' encoding='UTF-8'?>
<omdoc xml:id="A175839.omdoc" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:omdoc="http://omdoc.org/ns" xmlns="http://omdoc.org/ns">
        <!--This OMDoc file is generated from an OEIS entry, do not edit-->
        <theory name="A175839">
          <assertion class="***** TTTT *****">
      <CMP></CMP>
    </assertion><omtext class="starts-with">
      <CMP> 4,8,9,10,24,25,26,27,28,90,91,92,93,94,95,96,114,115,116,117,118,119,</CMP>
    </omtext><assertion class="***** UUUU *****">
      <CMP> 120,121,122,114,115,116,117,118,119,120,121,122,123,124,114,115,116,</CMP>
    </assertion><assertion class="***** IIII *****">
      <CMP> 117,118,119,120,121,122,123,124,125,126</CMP>
    </assertion><omtext class="name">
      <CMP> Smallest runs of n*2-1 consecutive composites.</CMP>
    </omtext><omtext class="comment">
      <CMP> Even lengths of runs of composites are omitted, as nontrivial runs always have odd lengths (see A046933).</CMP>
    </omtext><omtext class="comment">
      <CMP> Run 5 (starting at 114) has 13 consecutive composites and is repeated in runs 6 and 7. Run 8 starts at 524.</CMP>
    </omtext><omtext class="comment">
      <CMP> Why is the block starting at 114 repeated three times? I would expect that these blocks start with 528 and 888 as seen in A008950. [From _R. J. Mathar_, Sep 22 2010]</CMP>
    </omtext><omtext class="link">
      <CMP> Wikipedia, &lt;a href=&quot;http://en.wikipedia.org/wiki/Composite_number&quot;&gt;Composite number&lt;/a&gt;</CMP>
    </omtext><assertion class="example">
      <CMP> Run 1 has length 1; the first composite is 4.</CMP>
    </assertion><assertion class="example">
      <CMP> Run 2 has length 3; the first three consecutive composites are 8, 9, and 10.</CMP>
    </assertion><assertion class="example">
      <CMP> Run 3 has length 5; the first five consecutive composites are 24, 25, 26, 27, and 28.</CMP>
    </assertion><omtext class="program">
      <CMP> (Python) import pyecm</CMP>
    </omtext><omtext class="program">
      <CMP> # pyecm can be obtained from pyecm.sourceforge.net</CMP>
    </omtext><omtext class="program">
      <CMP> out = []</CMP>
    </omtext><omtext class="program">
      <CMP> run = 1</CMP>
    </omtext><omtext class="program">
      <CMP> for n in xrange(4, 10000):</CMP>
    </omtext><omtext class="program">
      <CMP> .isrun = True</CMP>
    </omtext><omtext class="program">
      <CMP> .for o in xrange(run): isrun *= not pyecm.isprime(n + o - run)</CMP>
    </omtext><omtext class="program">
      <CMP> .if isrun:</CMP>
    </omtext><omtext class="program">
      <CMP> ..for o in xrange(run): out.append(str(n + o - run))</CMP>
    </omtext><omtext class="program">
      <CMP> ..run += 2</CMP>
    </omtext><omtext class="program">
      <CMP> print &quot;, &quot;.join(out)</CMP>
    </omtext><assertion class="crossref">
      <CMP> Cf. A002808, A046933.</CMP>
    </assertion><assertion class="keywords">
      <CMP> easy,nonn</CMP>
    </assertion><assertion class="offset">
      <CMP> 1,1</CMP>
    </assertion><assertion class="author">
      <CMP> _Grant Garcia_, Sep 20 2010</CMP>
    </assertion>
        </theory>
      </omdoc>