<?xml version='1.0' encoding='UTF-8'?>
<omdoc xml:id="A228018.omdoc" xmlns:html="http://www.w3.org/1999/xhtml" xmlns:omdoc="http://omdoc.org/ns" xmlns="http://omdoc.org/ns">
        <!--This OMDoc file is generated from an OEIS entry, do not edit-->
        <theory name="A228018">
          <assertion class="***** TTTT *****">
      <CMP></CMP>
    </assertion><omtext class="starts-with">
      <CMP> 9,49,243,961,16129,67092481,17179607041,274876858369,</CMP>
    </omtext><assertion class="***** UUUU *****">
      <CMP> 4611686014132420609</CMP>
    </assertion><omtext class="name">
      <CMP> Prime powers p (A025475) such that sum of proper divisors of p is also a prime power.</CMP>
    </omtext><omtext class="comment">
      <CMP> Intersection of A025475(n) and A001065(A025475(n)).</CMP>
    </omtext><omtext class="comment">
      <CMP> Eight of the first nine terms are squares of Mersenne primes (A133049).</CMP>
    </omtext><assertion class="example">
      <CMP> Proper divisors of 243 are 1, 3, 9, 27, 81, their sum is 121 = 11^2, so 243 is in the sequence.</CMP>
    </assertion><omtext class="program">
      <CMP> (C)</CMP>
    </omtext><omtext class="program">
      <CMP> #include &lt;stdio.h&gt;</CMP>
    </omtext><omtext class="program">
      <CMP> #include &lt;stdlib.h&gt;</CMP>
    </omtext><omtext class="program">
      <CMP> #define TOP (1ULL&lt;&lt;32)</CMP>
    </omtext><omtext class="program">
      <CMP> typedef unsigned long long U64;</CMP>
    </omtext><omtext class="program">
      <CMP> int compare64(const void *p1, const void *p2) {</CMP>
    </omtext><omtext class="program">
      <CMP>   if (*(U64*)p1== *(U64*)p2) return 0;</CMP>
    </omtext><omtext class="program">
      <CMP>   return (*(U64*)p1 &lt; *(U64*)p2) ? -1 : 1;</CMP>
    </omtext><omtext class="program">
      <CMP> }</CMP>
    </omtext><omtext class="program">
      <CMP> U64 findElement(U64 *a, U64 start, U64 end, U64 element) {</CMP>
    </omtext><omtext class="program">
      <CMP>   if (start+1==end)  return (a[start]==element);</CMP>
    </omtext><omtext class="program">
      <CMP>   U64 mid = (start+end)/2;</CMP>
    </omtext><omtext class="program">
      <CMP>   if (a[mid] &gt; element)</CMP>
    </omtext><omtext class="program">
      <CMP>     return findElement(a, start, mid, element);</CMP>
    </omtext><omtext class="program">
      <CMP>   return findElement(a, mid, end, element);</CMP>
    </omtext><omtext class="program">
      <CMP> }</CMP>
    </omtext><omtext class="program">
      <CMP> int main() {</CMP>
    </omtext><omtext class="program">
      <CMP>   U64 i, j, p, n=0, *pp = (U64*)malloc(TOP/2), sum;</CMP>
    </omtext><omtext class="program">
      <CMP>   unsigned char *c = (unsigned char *)malloc(TOP/16);</CMP>
    </omtext><omtext class="program">
      <CMP>   if (!c || !pp) exit(1);</CMP>
    </omtext><omtext class="program">
      <CMP>   memset(c, 0, TOP/16);</CMP>
    </omtext><omtext class="program">
      <CMP>   pp[n++] = 1;</CMP>
    </omtext><omtext class="program">
      <CMP>   for (i=1; i &lt; TOP; i+=2) {</CMP>
    </omtext><omtext class="program">
      <CMP>     if ((c[i&gt;&gt;4] &amp; (1&lt;&lt;((i&gt;&gt;1) &amp; 7)))==0) {</CMP>
    </omtext><omtext class="program">
      <CMP>       for (p=i+(i==1), j = p*p; ; j*=p) {</CMP>
    </omtext><omtext class="program">
      <CMP>         pp[n++] = j;</CMP>
    </omtext><omtext class="program">
      <CMP>         double k = ((double)j) * ((double)p);</CMP>
    </omtext><omtext class="program">
      <CMP>         if (k &gt;= ((double)(1ULL&lt;&lt;60)*16.0)) break;</CMP>
    </omtext><omtext class="program">
      <CMP>       }</CMP>
    </omtext><omtext class="program">
      <CMP>       if (i&gt;1)</CMP>
    </omtext><omtext class="program">
      <CMP>         for (j=i*i&gt;&gt;1; j&lt;TOP/2; j+=i)  c[j&gt;&gt;3] |= 1&lt;&lt;(j&amp;7);</CMP>
    </omtext><omtext class="program">
      <CMP>     }</CMP>
    </omtext><omtext class="program">
      <CMP>     if ((i&amp;(i-2))==1)  printf(&quot;%llu &quot;, i);</CMP>
    </omtext><omtext class="program">
      <CMP>   }</CMP>
    </omtext><omtext class="program">
      <CMP>   printf(&quot;// %llu\n\n&quot;, n);</CMP>
    </omtext><omtext class="program">
      <CMP>   qsort(pp, n, 8, compare64);</CMP>
    </omtext><omtext class="program">
      <CMP>   for (i=1; i &lt; TOP; i+=2)</CMP>
    </omtext><omtext class="program">
      <CMP>     if ((c[i&gt;&gt;4] &amp; (1&lt;&lt;((i&gt;&gt;1) &amp; 7)))==0)</CMP>
    </omtext><omtext class="program">
      <CMP>       for (p=i+(i==1), sum=1+p, j = p*p; ; j*=p) {</CMP>
    </omtext><omtext class="program">
      <CMP>         if (findElement(pp, 0, n, sum)) printf(&quot;%llu, &quot;, j);</CMP>
    </omtext><omtext class="program">
      <CMP>         sum += j;</CMP>
    </omtext><omtext class="program">
      <CMP>         double k = ((double)j) * ((double)p);</CMP>
    </omtext><omtext class="program">
      <CMP>         if (k &gt;= ((double)(1ULL&lt;&lt;60)*16.0)) break;</CMP>
    </omtext><omtext class="program">
      <CMP>       }</CMP>
    </omtext><omtext class="program">
      <CMP>   return 0;</CMP>
    </omtext><omtext class="program">
      <CMP> }</CMP>
    </omtext><omtext class="program">
      <CMP> (PARI) for(n=1,10^6,if(!isprime(n),v=factor(n);if(matsize(v)[1]==1,s=sumdiv(n,d,d)-n;if(!isprime(s),vv=factor(s);if(matsize(vv)[1]==1,print(n)))))) /* _Ralf Stephan_, Aug 05 2013 */</CMP>
    </omtext><assertion class="crossref">
      <CMP> Cf. A025475, A001065, A133049.</CMP>
    </assertion><assertion class="keywords">
      <CMP> nonn,more</CMP>
    </assertion><assertion class="offset">
      <CMP> 1,1</CMP>
    </assertion><assertion class="author">
      <CMP> _Alex Ratushnyak_, Aug 02 2013</CMP>
    </assertion>
        </theory>
      </omdoc>